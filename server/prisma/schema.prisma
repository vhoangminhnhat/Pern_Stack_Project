// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  fullName       String
  password       String
  gender         Gender
  profileAvatar  String
  code           String?
  birthDay       DateTime?
  placeOfOrigin  String?
  identifyCard   String?
  dateOfIssue    DateTime?
  placeOfIssue   String?
  religion       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  conversationId String[]
  articles       Article[]
  messages       Messages[]
  conversations  Conversations[] @relation("ConversationsToUser")
}

model Conversations {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  participantsId String[]
  messagesId     String[]
  messages       Messages[]
  participants   User[]     @relation("ConversationsToUser")
}

model Messages {
  id              String        @id @default(cuid())
  conversationsId String
  senderId        String
  body            String
  fileName        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  conversation    Conversations @relation(fields: [conversationsId], references: [id])
  sender          User          @relation(fields: [senderId], references: [id])
}

model Article {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  url       String?
  file      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Student {
  id         String   @id @default(cuid())
  studentId  String   @unique // university student code
  fullName   String
  gender     Gender
  birthDate  DateTime?
  scores     Score[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subject {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  scores    Score[]
}

model Score {
  id         String   @id @default(cuid())
  studentId  String
  subjectId  String
  value      Float
  student    Student  @relation(fields: [studentId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
}

enum Gender {
  male
  female
}
